{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"bp_dps",
				"bp_displayed_user_id\t(functions.php)"
			],
			[
				"esc_at",
				"esc_attr_e"
			],
			[
				"align",
				"align-items"
			],
			[
				"option",
				"option\t<option>"
			],
			[
				"esc_h",
				"esc_html_e\t(functions.php)"
			],
			[
				"sele",
				"selected\tAttr"
			],
			[
				"foreach",
				"foreach"
			],
			[
				"_r",
				"_rptScaleDefinitions"
			],
			[
				"bp_get_group",
				"bp_get_group_slug\t(bp-groups-template.php)"
			],
			[
				"bp_loggedin",
				"bp_loggedin_user_domain\t(bp-members-template.php)"
			],
			[
				"bp_core_get_",
				"bp_core_get_userlink\t(bp-members-functions.php)"
			],
			[
				"sanitize",
				"sanitize_text_field"
			],
			[
				"just",
				"justify-content"
			],
			[
				"listst",
				"list-style"
			],
			[
				"vocatioIdeal",
				"vocatioIdealCompanyQuestionShortcode"
			],
			[
				"idealCompany",
				"idealCompanyInput\t(basic-info-tab.php)"
			],
			[
				"get_cure",
				"get_current_user_id"
			],
			[
				"get_style",
				"get_stylesheet_directory"
			],
			[
				"wp_send",
				"wp_send_json_success"
			],
			[
				"berkeu",
				"berkeUserAssessmentStatus"
			],
			[
				"_berke",
				"_berke_assessment_id"
			],
			[
				"assess",
				"assessmentStatus"
			],
			[
				"changed",
				"changedAssessment"
			],
			[
				"vocatio_get",
				"vocatio_loggedin_recruiter_id"
			],
			[
				"vocatioNew",
				"vocatioRecruiterNewMessageEmailNotification"
			],
			[
				"secondar",
				"secondary_item_id"
			],
			[
				"bp_logg",
				"bp_loggedin_user_id\t(company-profile.php)"
			],
			[
				"bp_core_get_u",
				"bp_core_get_username\t(bp-members-functions.php)"
			],
			[
				"bp_logged",
				"bp_loggedin_user_id"
			],
			[
				"get_post_thumb",
				"get_the_post_thumbnail"
			],
			[
				"soucr",
				"sourceJobId"
			],
			[
				"wp_list_",
				"wp_list_pluck"
			],
			[
				"tracke",
				"trackedCareerGroup"
			],
			[
				"company_get",
				"company_get_tracked_career_groups\t(tracked-career-groups.php)"
			],
			[
				"student",
				"studentMatches"
			],
			[
				"studetn",
				"studentMatches"
			],
			[
				"related",
				"related_industry"
			],
			[
				"tracked",
				"trackedCareerGroups"
			],
			[
				"ob_end_",
				"ob_end_flush"
			],
			[
				"wp_send_j",
				"wp_send_json_error"
			],
			[
				"add_action-wp_aj",
				"add_action-wp_ajax_{$_REQUEST['action']}\tWP Action"
			],
			[
				"recruiter",
				"recruiterForm"
			],
			[
				"suss",
				"success"
			],
			[
				"bp_current_",
				"bp_current_component\t(home.php)"
			],
			[
				"WP_CONTE",
				"WP_CONTENT_URL"
			],
			[
				"get_post_thu",
				"get_the_post_thumbnail\t(functions.php)"
			],
			[
				"get_current",
				"get_current_user_id\t(company-profile.php)"
			],
			[
				"get_user",
				"get_userdata($memberId"
			],
			[
				"wp_get_attachment_image",
				"wp_get_attachment_image_url\t(post-thumbnail-template.php)"
			],
			[
				"wp_get",
				"wp_get_attachment_url\t(post-template.php)"
			],
			[
				"text-",
				"text-transform"
			],
			[
				"text",
				"text-align"
			],
			[
				"WP_",
				"WP_User\t(functions.php)"
			],
			[
				"berke",
				"berkeResultTables"
			],
			[
				"berkeRes",
				"berkeResultsWrap"
			],
			[
				"jobF",
				"jobFits"
			],
			[
				"ajax",
				"ajax\t$.ajax()"
			],
			[
				"ide",
				"identitySelect"
			],
			[
				"identit",
				"identitySelect"
			],
			[
				"bp_core_",
				"bp_core_get_username\t(bp-members-functions.php)"
			],
			[
				"iden",
				"identityHtml"
			],
			[
				"get_curre",
				"get_current_user_id"
			],
			[
				"bp_core_get",
				"bp_core_get_userlink\t(bp-members-functions.php)"
			],
			[
				"bp_is_curre",
				"bp_is_current_action\t(bp-groups-template.php)"
			],
			[
				"wp_enqu",
				"wp_enqueue_script\tenqueue_script"
			],
			[
				"fcW",
				"fcWidgetHeight"
			],
			[
				"bp_get_gro",
				"bp_get_group_slug\t(functions.php)"
			],
			[
				"left",
				"left-half\t(index.html)"
			],
			[
				"tex",
				"text-align"
			],
			[
				"white",
				"white-space"
			],
			[
				"seciton-prou",
				"section-products-title\t(index.html)"
			],
			[
				"parall",
				"parallax_image"
			],
			[
				"a",
				"a\t<a>"
			],
			[
				"rgb",
				"rgba()"
			],
			[
				"z",
				"z-index"
			],
			[
				"tranls",
				"translateY\t(style.css)"
			],
			[
				"comm-s",
				"comm-subsection\tComment - Subsection comment"
			],
			[
				"comm-sec",
				"comm-section\tComment - Full section comment"
			],
			[
				"gform_pre_",
				"gform_pre_render_5\t(gravity_forms.php)"
			],
			[
				"revie",
				"review_author"
			],
			[
				"wp_get_curr",
				"wp_get_current_user\t(comment-template.php)"
			],
			[
				"padding-b",
				"padding-bottom"
			],
			[
				"background-c",
				"background-color"
			],
			[
				"window",
				"window).load\t(functions.php)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/functions.php",
			"settings":
			{
				"buffer_size": 135076,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/career-groups/sidebar.php",
			"settings":
			{
				"buffer_size": 3897,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/companies.php",
			"settings":
			{
				"buffer_size": 8240,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-following.php",
			"settings":
			{
				"buffer_size": 2316,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 310 files for \"register_sidebar\"\n\nC:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child\\functions.php:\n 1018  \t\tfunction vocatioKleoWidgetsInit()\n 1019  \t\t{\n 1020: \t\t\tregister_sidebar( array(\n 1021  \t\t\t\t'name' => __( 'Wide Footer 1', 'kleo_framework' ),\n 1022  \t\t\t\t'id' => 'footer-1-wide',\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 343,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/functions.php",
			"settings":
			{
				"buffer_size": 133661,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-includes/formatting.php",
			"settings":
			{
				"buffer_size": 189124,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/bp-groups-functions.php",
			"settings":
			{
				"buffer_size": 77398,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/main.css",
			"settings":
			{
				"buffer_size": 50497,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-activity/bp-activity-actions.php",
			"settings":
			{
				"buffer_size": 27970,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-functions.php",
			"settings":
			{
				"buffer_size": 125787,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n/**\n * BuddyPress XProfile Classes.\n *\n * @package BuddyPress\n * @subpackage XProfileClasses\n * @since 1.0.0\n */\n\n// Exit if accessed directly.\ndefined( 'ABSPATH' ) || exit;\n\n/**\n * Class to help set up XProfile fields.\n *\n * @since 1.0.0\n */\nclass BP_XProfile_Field {\n\n\t/**\n\t * Field ID.\n\t *\n\t * @since 1.0.0\n\t * @var int ID of field.\n\t */\n\tpublic $id;\n\n\t/**\n\t * Field group ID.\n\t *\n\t * @since 1.0.0\n\t * @var int Field group ID for field.\n\t */\n\tpublic $group_id;\n\n\t/**\n\t * Field parent ID.\n\t *\n\t * @since 1.0.0\n\t * @var int Parent ID of field.\n\t */\n\tpublic $parent_id;\n\n\t/**\n\t * Field type.\n\t *\n\t * @since 1.0.0\n\t * @var string Field type.\n\t */\n\tpublic $type;\n\n\t/**\n\t * Field name.\n\t *\n\t * @since 1.0.0\n\t * @var string Field name.\n\t */\n\tpublic $name;\n\n\t/**\n\t * Field description.\n\t *\n\t * @since 1.0.0\n\t * @var string Field description.\n\t */\n\tpublic $description;\n\n\t/**\n\t * Required field?\n\t *\n\t * @since 1.0.0\n\t * @var bool Is field required to be filled out?\n\t */\n\tpublic $is_required;\n\n\t/**\n\t * Deletable field?\n\t *\n\t * @since 1.0.0\n\t * @var int Can field be deleted?\n\t */\n\tpublic $can_delete = '1';\n\n\t/**\n\t * Field position.\n\t *\n\t * @since 1.0.0\n\t * @var int Field position.\n\t */\n\tpublic $field_order;\n\n\t/**\n\t * Option order.\n\t *\n\t * @since 1.0.0\n\t * @var int Option order.\n\t */\n\tpublic $option_order;\n\n\t/**\n\t * Order child fields.\n\t *\n\t * @since 1.0.0\n\t * @var string Order child fields by.\n\t */\n\tpublic $order_by;\n\n\t/**\n\t * Is this the default option?\n\t *\n\t * @since 1.0.0\n\t * @var bool Is this the default option for this field?\n\t */\n\tpublic $is_default_option;\n\n\t/**\n\t * Field data visibility.\n\t *\n\t * @since 1.9.0\n\t * @since 2.4.0 Property marked protected. Now accessible by magic method or by `get_default_visibility()`.\n\t * @var string Default field data visibility.\n\t */\n\tprotected $default_visibility;\n\n\t/**\n\t * Is the visibility able to be modified?\n\t *\n\t * @since 2.3.0\n\t * @since 2.4.0 Property marked protected. Now accessible by magic method or by `get_allow_custom_visibility()`.\n\t * @var string Members are allowed/disallowed to modify data visibility.\n\t */\n\tprotected $allow_custom_visibility;\n\n\t/**\n\t * Whether values from this field are autolinked to directory searches.\n\t *\n\t * @since 2.5.0\n\t * @var bool\n\t */\n\tpublic $do_autolink;\n\n\t/**\n\t * Field type option.\n\t *\n\t * @since 2.0.0\n\t * @var BP_XProfile_Field_Type Field type object used for validation.\n\t */\n\tpublic $type_obj = null;\n\n\t/**\n\t * Field data for user ID.\n\t *\n\t * @since 2.0.0\n\t * @var BP_XProfile_ProfileData Field data for user ID.\n\t */\n\tpublic $data;\n\n\t/**\n\t * Member types to which the profile field should be applied.\n\t *\n\t * @since 2.4.0\n\t * @var array Array of member types.\n\t */\n\tprotected $member_types;\n\n\t/**\n\t * Initialize and/or populate profile field.\n\t *\n\t * @since 1.1.0\n\t *\n\t * @param int|null $id Field ID.\n\t * @param int|null $user_id User ID.\n\t * @param bool     $get_data Get data.\n\t */\n\tpublic function __construct( $id = null, $user_id = null, $get_data = true ) {\n\n\t\tif ( ! empty( $id ) ) {\n\t\t\t$this->populate( $id, $user_id, $get_data );\n\n\t\t// Initialise the type obj to prevent fatals when creating new profile fields.\n\t\t} else {\n\t\t\t$this->type_obj            = bp_xprofile_create_field_type( 'textbox' );\n\t\t\t$this->type_obj->field_obj = $this;\n\t\t}\n\t}\n\n\t/**\n\t * Populate a profile field object.\n\t *\n\t * @since 1.1.0\n\t *\n\t * @global object $wpdb\n\t * @global object $userdata\n\t *\n\t * @param int      $id Field ID.\n\t * @param int|null $user_id User ID.\n\t * @param bool     $get_data Get data.\n\t */\n\tpublic function populate( $id, $user_id = null, $get_data = true ) {\n\t\tglobal $wpdb, $userdata;\n\n\t\tif ( empty( $user_id ) ) {\n\t\t\t$user_id = isset( $userdata->ID ) ? $userdata->ID : 0;\n\t\t}\n\n\t\t$field = wp_cache_get( $id, 'bp_xprofile_fields' );\n\t\tif ( false === $field ) {\n\t\t\t$bp = buddypress();\n\n\t\t\t$field = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM {$bp->profile->table_name_fields} WHERE id = %d\", $id ) );\n\n\t\t\tif ( ! $field ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\twp_cache_add( $id, $field, 'bp_xprofile_fields' );\n\t\t}\n\n\t\t$this->fill_data( $field );\n\n\t\tif ( ! empty( $get_data ) && ! empty( $user_id ) ) {\n\t\t\t$this->data = $this->get_field_data( $user_id );\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve a `BP_XProfile_Field` instance.\n\t *\n\t * @since 2.4.0\n\t * @since 2.8.0 Added `$user_id` and `$get_data` parameters.\n\t *\n\t * @static\n\t *\n\t * @param int  $field_id ID of the field.\n\t * @param int  $user_id  Optional. ID of the user associated with the field.\n\t *                       Ignored if `$get_data` is false. If `$get_data` is\n\t *                       true, but no `$user_id` is provided, defaults to\n\t *                       logged-in user ID.\n\t * @param bool $get_data Whether to fetch data for the specified `$user_id`.\n\t * @return BP_XProfile_Field|false Field object if found, otherwise false.\n\t */\n\tpublic static function get_instance( $field_id, $user_id = null, $get_data = true ) {\n\t\tglobal $wpdb;\n\n\t\t$field_id = (int) $field_id;\n\t\tif ( ! $field_id ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn new self( $field_id, $user_id, $get_data );\n\t}\n\n\t/**\n\t * Fill object vars based on data passed to the method.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @param array|object $args Array or object representing the `BP_XProfile_Field` properties.\n\t *                           Generally, this is a row from the fields database table.\n\t */\n\tpublic function fill_data( $args ) {\n\t\tif ( is_object( $args ) ) {\n\t\t\t$args = (array) $args;\n\t\t}\n\n\t\t$int_fields = array(\n\t\t\t'id', 'is_required', 'group_id', 'parent_id', 'is_default_option',\n\t\t\t'field_order', 'option_order', 'can_delete'\n\t\t);\n\n\t\tforeach ( $args as $k => $v ) {\n\t\t\tif ( 'name' === $k || 'description' === $k ) {\n\t\t\t\t$v = stripslashes( $v );\n\t\t\t}\n\n\t\t\t// Cast numeric strings as integers.\n\t\t\tif ( true === in_array( $k, $int_fields ) ) {\n\t\t\t\t$v = (int) $v;\n\t\t\t}\n\n\t\t\t$this->{$k} = $v;\n\t\t}\n\n\t\t// Create the field type and store a reference back to this object.\n\t\t$this->type_obj            = bp_xprofile_create_field_type( $this->type );\n\t\t$this->type_obj->field_obj = $this;\n\t}\n\n\t/**\n\t * Magic getter.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @param string $key Property name.\n\t * @return mixed\n\t */\n\tpublic function __get( $key ) {\n\t\tswitch ( $key ) {\n\t\t\tcase 'default_visibility' :\n\t\t\t\treturn $this->get_default_visibility();\n\t\t\t\tbreak;\n\n\t\t\tcase 'allow_custom_visibility' :\n\t\t\t\treturn $this->get_allow_custom_visibility();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Magic issetter.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @param string $key Property name.\n\t * @return bool\n\t */\n\tpublic function __isset( $key ) {\n\t\tswitch ( $key ) {\n\t\t\t// Backward compatibility for when these were public methods.\n\t\t\tcase 'allow_custom_visibility' :\n\t\t\tcase 'default_visibility' :\n\t\t\t\treturn true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Delete a profile field.\n\t *\n\t * @since 1.1.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @param boolean $delete_data Whether or not to delete data.\n\t * @return boolean\n\t */\n\tpublic function delete( $delete_data = false ) {\n\t\tglobal $wpdb;\n\n\t\t// Prevent deletion if no ID is present.\n\t\t// Prevent deletion by url when can_delete is false.\n\t\t// Prevent deletion of option 1 since this invalidates fields with options.\n\t\tif ( empty( $this->id ) || empty( $this->can_delete ) || ( $this->parent_id && $this->option_order == 1 ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$bp  = buddypress();\n\t\t$sql = $wpdb->prepare( \"DELETE FROM {$bp->profile->table_name_fields} WHERE id = %d OR parent_id = %d\", $this->id, $this->id );\n\n\t\tif ( ! $wpdb->query( $sql ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Delete the data in the DB for this field.\n\t\tif ( true === $delete_data ) {\n\t\t\tBP_XProfile_ProfileData::delete_for_field( $this->id );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Save a profile field.\n\t *\n\t * @since 1.1.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @return boolean\n\t */\n\tpublic function save() {\n\t\tglobal $wpdb;\n\n\t\t$bp = buddypress();\n\n\t\t$this->group_id     = apply_filters( 'xprofile_field_group_id_before_save',     $this->group_id,     $this->id );\n\t\t$this->parent_id    = apply_filters( 'xprofile_field_parent_id_before_save',    $this->parent_id,    $this->id );\n\t\t$this->type         = apply_filters( 'xprofile_field_type_before_save',         $this->type,         $this->id );\n\t\t$this->name         = apply_filters( 'xprofile_field_name_before_save',         $this->name,         $this->id );\n\t\t$this->description  = apply_filters( 'xprofile_field_description_before_save',  $this->description,  $this->id );\n\t\t$this->is_required  = apply_filters( 'xprofile_field_is_required_before_save',  $this->is_required,  $this->id );\n\t\t$this->order_by\t    = apply_filters( 'xprofile_field_order_by_before_save',     $this->order_by,     $this->id );\n\t\t$this->field_order  = apply_filters( 'xprofile_field_field_order_before_save',  $this->field_order,  $this->id );\n\t\t$this->option_order = apply_filters( 'xprofile_field_option_order_before_save', $this->option_order, $this->id );\n\t\t$this->can_delete   = apply_filters( 'xprofile_field_can_delete_before_save',   $this->can_delete,   $this->id );\n\t\t$this->type_obj     = bp_xprofile_create_field_type( $this->type );\n\n\t\t/**\n\t\t * Fires before the current field instance gets saved.\n\t\t *\n\t\t * Please use this hook to filter the properties above. Each part will be passed in.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @param BP_XProfile_Field $this Current instance of the field being saved.\n\t\t */\n\t\tdo_action_ref_array( 'xprofile_field_before_save', array( $this ) );\n\n\t\t$is_new_field = is_null( $this->id );\n\n\t\tif ( ! $is_new_field ) {\n\t\t\t$sql = $wpdb->prepare( \"UPDATE {$bp->profile->table_name_fields} SET group_id = %d, parent_id = 0, type = %s, name = %s, description = %s, is_required = %d, order_by = %s, field_order = %d, option_order = %d, can_delete = %d, is_default_option = %d WHERE id = %d\", $this->group_id, $this->type, $this->name, $this->description, $this->is_required, $this->order_by, $this->field_order, $this->option_order, $this->can_delete, $this->is_default_option, $this->id );\n\t\t} else {\n\t\t\t$sql = $wpdb->prepare( \"INSERT INTO {$bp->profile->table_name_fields} (group_id, parent_id, type, name, description, is_required, order_by, field_order, option_order, can_delete, is_default_option ) VALUES ( %d, %d, %s, %s, %s, %d, %s, %d, %d, %d, %d )\", $this->group_id, $this->parent_id, $this->type, $this->name, $this->description, $this->is_required, $this->order_by, $this->field_order, $this->option_order, $this->can_delete, $this->is_default_option );\n\t\t}\n\n\t\t/**\n\t\t * Check for null so field options can be changed without changing any\n\t\t * other part of the field. The described situation will return 0 here.\n\t\t */\n\t\tif ( $wpdb->query( $sql ) !== null ) {\n\n\t\t\tif ( $is_new_field ) {\n\t\t\t\t$this->id = $wpdb->insert_id;\n\t\t\t}\n\n\t\t\t// Only do this if we are editing an existing field.\n\t\t\tif ( ! $is_new_field ) {\n\n\t\t\t\t/**\n\t\t\t\t * Remove any radio or dropdown options for this\n\t\t\t\t * field. They will be re-added if needed.\n\t\t\t\t * This stops orphan options if the user changes a\n\t\t\t\t * field from a radio button field to a text box.\n\t\t\t\t */\n\t\t\t\t$this->delete_children();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Check to see if this is a field with child options.\n\t\t\t * We need to add the options to the db, if it is.\n\t\t\t */\n\t\t\tif ( $this->type_obj->supports_options ) {\n\n\t\t\t\t$parent_id = $this->id;\n\n\t\t\t\t// Allow plugins to filter the field's child options (i.e. the items in a selectbox).\n\t\t\t\t$post_option  = ! empty( $_POST[\"{$this->type}_option\"]           ) ? $_POST[\"{$this->type}_option\"]           : '';\n\t\t\t\t$post_default = ! empty( $_POST[\"isDefault_{$this->type}_option\"] ) ? $_POST[\"isDefault_{$this->type}_option\"] : '';\n\n\t\t\t\t/**\n\t\t\t\t * Filters the submitted field option value before saved.\n\t\t\t\t *\n\t\t\t\t * @since 1.5.0\n\t\t\t\t *\n\t\t\t\t * @param string            $post_option Submitted option value.\n\t\t\t\t * @param BP_XProfile_Field $type        Current field type being saved for.\n\t\t\t\t */\n\t\t\t\t$options      = apply_filters( 'xprofile_field_options_before_save', $post_option,  $this->type );\n\n\t\t\t\t/**\n\t\t\t\t * Filters the default field option value before saved.\n\t\t\t\t *\n\t\t\t\t * @since 1.5.0\n\t\t\t\t *\n\t\t\t\t * @param string            $post_default Default option value.\n\t\t\t\t * @param BP_XProfile_Field $type         Current field type being saved for.\n\t\t\t\t */\n\t\t\t\t$defaults     = apply_filters( 'xprofile_field_default_before_save', $post_default, $this->type );\n\n\t\t\t\t$counter = 1;\n\t\t\t\tif ( !empty( $options ) ) {\n\t\t\t\t\tforeach ( (array) $options as $option_key => $option_value ) {\n\t\t\t\t\t\t$is_default = 0;\n\n\t\t\t\t\t\tif ( is_array( $defaults ) ) {\n\t\t\t\t\t\t\tif ( isset( $defaults[ $option_key ] ) ) {\n\t\t\t\t\t\t\t\t$is_default = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( (int) $defaults == $option_key ) {\n\t\t\t\t\t\t\t\t$is_default = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( '' != $option_value ) {\n\t\t\t\t\t\t\t$sql = $wpdb->prepare( \"INSERT INTO {$bp->profile->table_name_fields} (group_id, parent_id, type, name, description, is_required, option_order, is_default_option) VALUES (%d, %d, 'option', %s, '', 0, %d, %d)\", $this->group_id, $parent_id, $option_value, $counter, $is_default );\n\t\t\t\t\t\t\tif ( ! $wpdb->query( $sql ) ) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$counter++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Fires after the current field instance gets saved.\n\t\t\t *\n\t\t\t * @since 1.0.0\n\t\t\t *\n\t\t\t * @param BP_XProfile_Field $this Current instance of the field being saved.\n\t\t\t */\n\t\t\tdo_action_ref_array( 'xprofile_field_after_save', array( $this ) );\n\n\t\t\t// Recreate type_obj in case someone changed $this->type via a filter.\n\t\t\t$this->type_obj            = bp_xprofile_create_field_type( $this->type );\n\t\t\t$this->type_obj->field_obj = $this;\n\n\t\t\treturn $this->id;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Get field data for a user ID.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param int $user_id ID of the user to get field data for.\n\t * @return BP_XProfile_ProfileData\n\t */\n\tpublic function get_field_data( $user_id = 0 ) {\n\t\treturn new BP_XProfile_ProfileData( $this->id, $user_id );\n\t}\n\n\t/**\n\t * Get all child fields for this field ID.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @param bool $for_editing Whether or not the field is for editing.\n\t * @return array\n\t */\n\tpublic function get_children( $for_editing = false ) {\n\t\tglobal $wpdb;\n\n\t\t// This is done here so we don't have problems with sql injection.\n\t\tif ( empty( $for_editing ) && ( 'asc' === $this->order_by ) ) {\n\t\t\t$sort_sql = 'ORDER BY name ASC';\n\t\t} elseif ( empty( $for_editing ) && ( 'desc' === $this->order_by ) ) {\n\t\t\t$sort_sql = 'ORDER BY name DESC';\n\t\t} else {\n\t\t\t$sort_sql = 'ORDER BY option_order ASC';\n\t\t}\n\n\t\t// This eliminates a problem with getting all fields when there is no\n\t\t// id for the object.\n\t\tif ( empty( $this->id ) ) {\n\t\t\t$parent_id = -1;\n\t\t} else {\n\t\t\t$parent_id = $this->id;\n\t\t}\n\n\t\t$bp  = buddypress();\n\t\t$sql = $wpdb->prepare( \"SELECT * FROM {$bp->profile->table_name_fields} WHERE parent_id = %d AND group_id = %d {$sort_sql}\", $parent_id, $this->group_id );\n\n\t\t$children = $wpdb->get_results( $sql );\n\n\t\t/**\n\t\t * Filters the found children for a field.\n\t\t *\n\t\t * @since 1.2.5\n\t\t *\n\t\t * @param object $children    Found children for a field.\n\t\t * @param bool   $for_editing Whether or not the field is for editing.\n\t\t */\n\t\treturn apply_filters( 'bp_xprofile_field_get_children', $children, $for_editing );\n\t}\n\n\t/**\n\t * Delete all field children for this field.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @global object $wpdb\n\t */\n\tpublic function delete_children() {\n\t\tglobal $wpdb;\n\n\t\t$bp  = buddypress();\n\t\t$sql = $wpdb->prepare( \"DELETE FROM {$bp->profile->table_name_fields} WHERE parent_id = %d\", $this->id );\n\n\t\t$wpdb->query( $sql );\n\t}\n\n\t/**\n\t * Gets the member types to which this field should be available.\n\t *\n\t * Will not return inactive member types, even if associated metadata is found.\n\t *\n\t * 'null' is a special pseudo-type, which represents users that do not have a member type.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @return array Array of member type names.\n\t */\n\tpublic function get_member_types() {\n\t\tif ( ! is_null( $this->member_types ) ) {\n\t\t\treturn $this->member_types;\n\t\t}\n\n\t\t$raw_types = bp_xprofile_get_meta( $this->id, 'field', 'member_type', false );\n\n\t\t// If `$raw_types` is not an array, it probably means this is a new field (id=0).\n\t\tif ( ! is_array( $raw_types ) ) {\n\t\t\t$raw_types = array();\n\t\t}\n\n\t\t// If '_none' is found in the array, it overrides all types.\n\t\t$types = array();\n\t\tif ( ! in_array( '_none', $raw_types ) ) {\n\t\t\t$registered_types = bp_get_member_types();\n\n\t\t\t// Eliminate invalid member types saved in the database.\n\t\t\tforeach ( $raw_types as $raw_type ) {\n\t\t\t\t// 'null' is a special case - it represents users without a type.\n\t\t\t\tif ( 'null' === $raw_type || isset( $registered_types[ $raw_type ] ) ) {\n\t\t\t\t\t$types[] = $raw_type;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If no member types have been saved, intepret as *all* member types.\n\t\t\tif ( empty( $types ) ) {\n\t\t\t\t$types = array_values( $registered_types );\n\n\t\t\t\t// + the \"null\" type, ie users without a type.\n\t\t\t\t$types[] = 'null';\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the member types to which an XProfile object should be applied.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @param array             $types Member types.\n\t\t * @param BP_XProfile_Field $field Field object.\n\t\t */\n\t\t$this->member_types = apply_filters( 'bp_xprofile_field_member_types', $types, $this );\n\n\t\treturn $this->member_types;\n\t}\n\n\t/**\n\t * Sets the member types for this field.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @param array $member_types Array of member types. Can include 'null' (users with no type) in addition to any\n\t *                            registered types.\n\t * @param bool  $append       Whether to append to existing member types. If false, all existing member type\n\t *                            associations will be deleted before adding your `$member_types`. Default false.\n\t * @return array Member types for the current field, after being saved.\n\t */\n\tpublic function set_member_types( $member_types, $append = false ) {\n\t\t// Unset invalid member types.\n\t\t$types = array();\n\t\tforeach ( $member_types as $member_type ) {\n\t\t\t// 'null' is a special case - it represents users without a type.\n\t\t\tif ( 'null' === $member_type || bp_get_member_type_object( $member_type ) ) {\n\t\t\t\t$types[] = $member_type;\n\t\t\t}\n\t\t}\n\n\t\t// When `$append` is false, delete all existing types before adding new ones.\n\t\tif ( ! $append ) {\n\t\t\tbp_xprofile_delete_meta( $this->id, 'field', 'member_type' );\n\n\t\t\t/*\n\t\t\t * We interpret an empty array as disassociating the field from all types. This is\n\t\t\t * represented internally with the '_none' flag.\n\t\t\t */\n\t\t\tif ( empty( $types ) ) {\n\t\t\t\tbp_xprofile_add_meta( $this->id, 'field', 'member_type', '_none' );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Unrestricted fields are represented in the database as having no 'member_type'.\n\t\t * We detect whether a field is being set to unrestricted by checking whether the\n\t\t * list of types passed to the method is the same as the list of registered types,\n\t\t * plus the 'null' pseudo-type.\n\t\t */\n\t\t$_rtypes  = bp_get_member_types();\n\t\t$rtypes   = array_values( $_rtypes );\n\t\t$rtypes[] = 'null';\n\n\t\tsort( $types );\n\t\tsort( $rtypes );\n\n\t\t// Only save if this is a restricted field.\n\t\tif ( $types !== $rtypes ) {\n\t\t\t// Save new types.\n\t\t\tforeach ( $types as $type ) {\n\t\t\t\tbp_xprofile_add_meta( $this->id, 'field', 'member_type', $type );\n\t\t\t}\n\t\t}\n\n\t\t// Reset internal cache of member types.\n\t\t$this->member_types = null;\n\n\t\t/**\n\t\t * Fires after a field's member types have been updated.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @param BP_XProfile_Field $this Field object.\n\t\t */\n\t\tdo_action( 'bp_xprofile_field_set_member_type', $this );\n\n\t\t// Refetch fresh items from the database.\n\t\treturn $this->get_member_types();\n\t}\n\n\t/**\n\t * Gets a label representing the field's member types.\n\t *\n\t * This label is displayed alongside the field's name on the Profile Fields Dashboard panel.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @return string\n\t */\n\tpublic function get_member_type_label() {\n\t\t// Field 1 is always displayed to everyone, so never gets a label.\n\t\tif ( 1 == $this->id ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Return an empty string if no member types are registered.\n\t\t$all_types = bp_get_member_types();\n\t\tif ( empty( $all_types ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$member_types = $this->get_member_types();\n\n\t\t// If the field applies to all member types, show no message.\n\t\t$all_types[] = 'null';\n\t\tif ( array_values( $all_types ) == $member_types ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$label = '';\n\t\tif ( ! empty( $member_types ) ) {\n\t\t\t$has_null = false;\n\t\t\t$member_type_labels = array();\n\t\t\tforeach ( $member_types as $member_type ) {\n\t\t\t\tif ( 'null' === $member_type ) {\n\t\t\t\t\t$has_null = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t$mt_obj = bp_get_member_type_object( $member_type );\n\t\t\t\t\t$member_type_labels[] = $mt_obj->labels['name'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Alphabetical sort.\n\t\t\tnatcasesort( $member_type_labels );\n\t\t\t$member_type_labels = array_values( $member_type_labels );\n\n\t\t\t// Add the 'null' option to the end of the list.\n\t\t\tif ( $has_null ) {\n\t\t\t\t$member_type_labels[] = __( 'Users with no member type', 'buddypress' );\n\t\t\t}\n\n\t\t\t$label = sprintf( __( '(Member types: %s)', 'buddypress' ), implode( ', ', array_map( 'esc_html', $member_type_labels ) ) );\n\t\t} else {\n\t\t\t$label = '<span class=\"member-type-none-notice\">' . __( '(Unavailable to all members)', 'buddypress' ) . '</span>';\n\t\t}\n\n\t\treturn $label;\n\t}\n\n\t/**\n\t * Get the field's default visibility setting.\n\t *\n\t * Lazy-loaded to reduce overhead.\n\t *\n\t * Defaults to 'public' if no visibility setting is found in the database.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @return string\n\t */\n\tpublic function get_default_visibility() {\n\t\tif ( ! isset( $this->default_visibility ) ) {\n\t\t\t$this->default_visibility = bp_xprofile_get_meta( $this->id, 'field', 'default_visibility' );\n\n\t\t\tif ( ! $this->default_visibility ) {\n\t\t\t\t$this->default_visibility = 'public';\n\t\t\t}\n\t\t}\n\n\t\treturn $this->default_visibility;\n\t}\n\n\t/**\n\t * Get whether the field's default visibility can be overridden by users.\n\t *\n\t * Lazy-loaded to reduce overhead.\n\t *\n\t * Defaults to 'allowed'.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @return string 'disabled' or 'allowed'.\n\t */\n\tpublic function get_allow_custom_visibility() {\n\t\tif ( ! isset( $this->allow_custom_visibility ) ) {\n\t\t\t$allow_custom_visibility = bp_xprofile_get_meta( $this->id, 'field', 'allow_custom_visibility' );\n\n\t\t\tif ( 'disabled' === $allow_custom_visibility ) {\n\t\t\t\t$this->allow_custom_visibility = 'disabled';\n\t\t\t} else {\n\t\t\t\t$this->allow_custom_visibility = 'allowed';\n\t\t\t}\n\t\t}\n\n\t\treturn $this->allow_custom_visibility;\n\t}\n\n\t/**\n\t * Get whether the field values should be auto-linked to a directory search.\n\t *\n\t * Lazy-loaded to reduce overhead.\n\t *\n\t * Defaults to true for multi and default fields, false for single fields.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return bool\n\t */\n\tpublic function get_do_autolink() {\n\t\tif ( ! isset( $this->do_autolink ) ) {\n\t\t\t$do_autolink = bp_xprofile_get_meta( $this->id, 'field', 'do_autolink' );\n\n\t\t\tif ( '' === $do_autolink ) {\n\t\t\t\t$this->do_autolink = $this->type_obj->supports_options;\n\t\t\t} else {\n\t\t\t\t$this->do_autolink = 'on' === $do_autolink;\n\t\t\t}\n\t\t}\n\n\t\treturn $this->do_autolink;\n\t}\n\n\t/* Static Methods ********************************************************/\n\n\t/**\n\t * Get the type for provided field ID.\n\t *\n\t * @param int $field_id Field ID to get type of.\n\t * @return bool|null|string\n\t */\n\tpublic static function get_type( $field_id = 0 ) {\n\t\tglobal $wpdb;\n\n\t\t// Bail if no field ID.\n\t\tif ( empty( $field_id ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$bp   = buddypress();\n\t\t$sql  = $wpdb->prepare( \"SELECT type FROM {$bp->profile->table_name_fields} WHERE id = %d\", $field_id );\n\t\t$type = $wpdb->get_var( $sql );\n\n\t\t// Return field type.\n\t\tif ( ! empty( $type ) ) {\n\t\t\treturn $type;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Delete all fields in a field group.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @param int $group_id ID of the field group to delete fields from.\n\t * @return boolean\n\t */\n\tpublic static function delete_for_group( $group_id = 0 ) {\n\t\tglobal $wpdb;\n\n\t\t// Bail if no group ID.\n\t\tif ( empty( $group_id ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$bp      = buddypress();\n\t\t$sql     = $wpdb->prepare( \"DELETE FROM {$bp->profile->table_name_fields} WHERE group_id = %d\", $group_id );\n\t\t$deleted = $wpdb->get_var( $sql );\n\n\t\t// Return true if fields were deleted.\n\t\tif ( false !== $deleted ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get field ID from field name.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @param string $field_name Name of the field to query the ID for.\n\t * @return int|null Field ID on success; null on failure.\n\t */\n\tpublic static function get_id_from_name( $field_name = '' ) {\n\t\tglobal $wpdb;\n\t\t\n\t\t$bp = buddypress();\n\n\t\tif ( empty( $bp->profile->table_name_fields ) || empty( $field_name ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$id = bp_core_get_incremented_cache( $field_name, 'bp_xprofile_fields_by_name' );\n\t\tif ( false === $id ) {\n\t\t\t$sql = $wpdb->prepare( \"SELECT id FROM {$bp->profile->table_name_fields} WHERE name = %s AND parent_id = 0\", $field_name );\n\t\t\t$id = $wpdb->get_var( $sql );\n\t\t\tbp_core_set_incremented_cache( $field_name, 'bp_xprofile_fields_by_name', $id );\n\t\t}\n\n\t\treturn is_numeric( $id ) ? (int) $id : $id;\n\t}\n\n\t/**\n\t * Update field position and/or field group when relocating.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @global object $wpdb\n\t *\n\t * @param int      $field_id       ID of the field to update.\n\t * @param int|null $position       Field position to update.\n\t * @param int|null $field_group_id ID of the field group.\n\t * @return boolean\n\t */\n\tpublic static function update_position( $field_id, $position = null, $field_group_id = null ) {\n\t\tglobal $wpdb;\n\n\t\t// Bail if invalid position or field group.\n\t\tif ( ! is_numeric( $position ) || ! is_numeric( $field_group_id ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get table name and field parent.\n\t\t$table_name = buddypress()->profile->table_name_fields;\n\t\t$sql        = $wpdb->prepare( \"UPDATE {$table_name} SET field_order = %d, group_id = %d WHERE id = %d\", $position, $field_group_id, $field_id );\n\t\t$parent     = $wpdb->query( $sql );\n\n\t\t// Update $field_id with new $position and $field_group_id.\n\t\tif ( ! empty( $parent ) && ! is_wp_error( $parent ) ) {\n\n\t\t\t// Update any children of this $field_id.\n\t\t\t$sql = $wpdb->prepare( \"UPDATE {$table_name} SET group_id = %d WHERE parent_id = %d\", $field_group_id, $field_id );\n\t\t\t$wpdb->query( $sql );\n\n\t\t\t// Invalidate profile field cache.\n\t\t\twp_cache_delete( $field_id, 'bp_xprofile_fields' );\n\n\t\t\treturn $parent;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Gets the IDs of fields applicable for a given member type or array of member types.\n\t *\n\t * @since 2.4.0\n\t *\n\t * @param string|array $member_types Member type or array of member types. Use 'any' to return unrestricted\n\t *                                   fields (those available for anyone, regardless of member type).\n\t * @return array Multi-dimensional array, with field IDs as top-level keys, and arrays of member types\n\t *               associated with each field as values.\n\t */\n\tpublic static function get_fields_for_member_type( $member_types ) {\n\t\tglobal $wpdb;\n\n\t\t$fields = array();\n\n\t\tif ( empty( $member_types ) ) {\n\t\t\t$member_types = array( 'any' );\n\t\t} elseif ( ! is_array( $member_types ) ) {\n\t\t\t$member_types = array( $member_types );\n\t\t}\n\n\t\t$bp = buddypress();\n\n\t\t// Pull up all recorded field member type data.\n\t\t$mt_meta = wp_cache_get( 'field_member_types', 'bp_xprofile' );\n\t\tif ( false === $mt_meta ) {\n\t\t\t$mt_meta = $wpdb->get_results( \"SELECT object_id, meta_value FROM {$bp->profile->table_name_meta} WHERE meta_key = 'member_type' AND object_type = 'field'\" );\n\t\t\twp_cache_set( 'field_member_types', $mt_meta, 'bp_xprofile' );\n\t\t}\n\n\t\t// Keep track of all fields with recorded member_type metadata.\n\t\t$all_recorded_field_ids = wp_list_pluck( $mt_meta, 'object_id' );\n\n\t\t// Sort member_type matches in arrays, keyed by field_id.\n\t\tforeach ( $mt_meta as $_mt_meta ) {\n\t\t\tif ( ! isset( $fields[ $_mt_meta->object_id ] ) ) {\n\t\t\t\t$fields[ $_mt_meta->object_id ] = array();\n\t\t\t}\n\n\t\t\t$fields[ $_mt_meta->object_id ][] = $_mt_meta->meta_value;\n\t\t}\n\n\t\t/*\n\t\t * Filter out fields that don't match any passed types, or those marked '_none'.\n\t\t * The 'any' type is implicitly handled here: it will match no types.\n\t\t */\n\t\tforeach ( $fields as $field_id => $field_types ) {\n\t\t\tif ( ! array_intersect( $field_types, $member_types ) ) {\n\t\t\t\tunset( $fields[ $field_id ] );\n\t\t\t}\n\t\t}\n\n\t\t// Any fields with no member_type metadata are available to all member types.\n\t\tif ( ! in_array( '_none', $member_types ) ) {\n\t\t\tif ( ! empty( $all_recorded_field_ids ) ) {\n\t\t\t\t$all_recorded_field_ids_sql = implode( ',', array_map( 'absint', $all_recorded_field_ids ) );\n\t\t\t\t$unrestricted_field_ids = $wpdb->get_col( \"SELECT id FROM {$bp->profile->table_name_fields} WHERE id NOT IN ({$all_recorded_field_ids_sql})\" );\n\t\t\t} else {\n\t\t\t\t$unrestricted_field_ids = $wpdb->get_col( \"SELECT id FROM {$bp->profile->table_name_fields}\" );\n\t\t\t}\n\n\t\t\t// Append the 'null' pseudo-type.\n\t\t\t$all_member_types   = bp_get_member_types();\n\t\t\t$all_member_types   = array_values( $all_member_types );\n\t\t\t$all_member_types[] = 'null';\n\n\t\t\tforeach ( $unrestricted_field_ids as $unrestricted_field_id ) {\n\t\t\t\t$fields[ $unrestricted_field_id ] = $all_member_types;\n\t\t\t}\n\t\t}\n\n\t\treturn $fields;\n\t}\n\n\t/**\n\t * Validate form field data on sumbission.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @global $message\n\t *\n\t * @return boolean\n\t */\n\tpublic static function admin_validate() {\n\t\tglobal $message;\n\n\t\t// Check field name.\n\t\tif ( ! isset( $_POST['title'] ) || ( '' === $_POST['title'] ) ) {\n\t\t\t$message = esc_html__( 'Profile fields must have a name.', 'buddypress' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check field requirement.\n\t\tif ( ! isset( $_POST['required'] ) ) {\n\t\t\t$message = esc_html__( 'Profile field requirement is missing.', 'buddypress' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check field type.\n\t\tif ( empty( $_POST['fieldtype'] ) ) {\n\t\t\t$message = esc_html__( 'Profile field type is missing.', 'buddypress' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check that field is of valid type.\n\t\tif ( ! in_array( $_POST['fieldtype'], array_keys( bp_xprofile_get_field_types() ), true ) ) {\n\t\t\t$message = sprintf( esc_html__( 'The profile field type %s is not registered.', 'buddypress' ), '<code>' . esc_attr( $_POST['fieldtype'] ) . '</code>' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get field type so we can check for and lavidate any field options.\n\t\t$field_type = bp_xprofile_create_field_type( $_POST['fieldtype'] );\n\n\t\t// Field type requires options.\n\t\tif ( true === $field_type->supports_options ) {\n\n\t\t\t// Build the field option key.\n\t\t\t$option_name = sanitize_key( $_POST['fieldtype'] ) . '_option';\n\n\t\t\t// Check for missing or malformed options.\n\t\t\tif ( empty( $_POST[ $option_name ] ) || ! is_array( $_POST[ $option_name ] ) ) {\n\t\t\t\t$message = esc_html__( 'These field options are invalid.', 'buddypress' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Trim out empty field options.\n\t\t\t$field_values  = array_values( $_POST[ $option_name ] );\n\t\t\t$field_options = array_map( 'sanitize_text_field', $field_values );\n\t\t\t$field_count   = count( $field_options );\n\n\t\t\t// Check for missing or malformed options.\n\t\t\tif ( 0 === $field_count ) {\n\t\t\t\t$message = sprintf( esc_html__( '%s require at least one option.', 'buddypress' ), $field_type->name );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If only one option exists, it cannot be an empty string.\n\t\t\tif ( ( 1 === $field_count ) && ( '' === $field_options[0] ) ) {\n\t\t\t\t$message = sprintf( esc_html__( '%s require at least one option.', 'buddypress' ), $field_type->name );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Save miscellaneous settings for this field.\n\t *\n\t * Some field types have type-specific settings, which are saved here.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param array $settings Array of settings.\n\t */\n\tpublic function admin_save_settings( $settings ) {\n\t\treturn $this->type_obj->admin_save_settings( $this->id, $settings );\n\t}\n\n\t/**\n\t * Populates the items for radio buttons, checkboxes, and dropdown boxes.\n\t */\n\tpublic function render_admin_form_children() {\n\t\tforeach ( array_keys( bp_xprofile_get_field_types() ) as $field_type ) {\n\t\t\t$type_obj = bp_xprofile_create_field_type( $field_type );\n\t\t\t$type_obj->admin_new_field_html( $this );\n\t\t}\n\t}\n\n\t/**\n\t * Oupput the admin form for this field.\n\t *\n\t * @since 1.9.0\n\t *\n\t * @param string $message Message to display.\n\t */\n\tpublic function render_admin_form( $message = '' ) {\n\t\tif ( empty( $this->id ) ) {\n\t\t\t$title  = __( 'Add New Field', 'buddypress' );\n\t\t\t$action\t= \"users.php?page=bp-profile-setup&amp;group_id=\" . $this->group_id . \"&amp;mode=add_field#tabs-\" . $this->group_id;\n\t\t\t$button\t= __( 'Save', 'buddypress' );\n\n\t\t\tif ( !empty( $_POST['saveField'] ) ) {\n\t\t\t\t$this->name        = $_POST['title'];\n\t\t\t\t$this->description = $_POST['description'];\n\t\t\t\t$this->is_required = $_POST['required'];\n\t\t\t\t$this->type        = $_POST['fieldtype'];\n\t\t\t\t$this->field_order = $_POST['field_order'];\n\n\t\t\t\tif ( ! empty( $_POST[\"sort_order_{$this->type}\"] ) ) {\n\t\t\t\t\t$this->order_by = $_POST[\"sort_order_{$this->type}\"];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$title  = __( 'Edit Field', 'buddypress' );\n\t\t\t$action = \"users.php?page=bp-profile-setup&amp;mode=edit_field&amp;group_id=\" . $this->group_id . \"&amp;field_id=\" . $this->id . \"#tabs-\" . $this->group_id;\n\t\t\t$button\t= __( 'Update', 'buddypress' );\n\t\t} ?>\n\n\t\t<div class=\"wrap\">\n\n\t\t\t<h1><?php echo esc_html( $title ); ?></h1>\n\n\t\t\t<?php if ( !empty( $message ) ) : ?>\n\n\t\t\t\t<div id=\"message\" class=\"error fade\">\n\t\t\t\t\t<p><?php echo esc_html( $message ); ?></p>\n\t\t\t\t</div>\n\n\t\t\t<?php endif; ?>\n\n\t\t\t<form id=\"bp-xprofile-add-field\" action=\"<?php echo esc_url( $action ); ?>\" method=\"post\">\n\t\t\t\t<div id=\"poststuff\">\n\t\t\t\t\t<div id=\"post-body\" class=\"metabox-holder columns-<?php echo ( 1 == get_current_screen()->get_columns() ) ? '1' : '2'; ?>\">\n\t\t\t\t\t\t<div id=\"post-body-content\">\n\n\t\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t\t// Output the name & description fields.\n\t\t\t\t\t\t\t$this->name_and_description(); ?>\n\n\t\t\t\t\t\t</div><!-- #post-body-content -->\n\n\t\t\t\t\t\t<div id=\"postbox-container-1\" class=\"postbox-container\">\n\n\t\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t\t// Output the sumbit metabox.\n\t\t\t\t\t\t\t$this->submit_metabox( $button );\n\n\t\t\t\t\t\t\t// Output the required metabox.\n\t\t\t\t\t\t\t$this->required_metabox();\n\n\t\t\t\t\t\t\t// Output the Member Types metabox.\n\t\t\t\t\t\t\t$this->member_type_metabox();\n\n\t\t\t\t\t\t\t// Output the field visibility metaboxes.\n\t\t\t\t\t\t\t$this->visibility_metabox();\n\n\t\t\t\t\t\t\t// Output the autolink metabox.\n\t\t\t\t\t\t\t$this->autolink_metabox();\n\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Fires after XProfile Field sidebar metabox.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tdo_action( 'xprofile_field_after_sidebarbox', $this ); ?>\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div id=\"postbox-container-2\" class=\"postbox-container\">\n\n\t\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Fires before XProfile Field content metabox.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @since 2.3.0\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tdo_action( 'xprofile_field_before_contentbox', $this );\n\n\t\t\t\t\t\t\t// Output the field attributes metabox.\n\t\t\t\t\t\t\t$this->type_metabox();\n\n\t\t\t\t\t\t\t// Output hidden inputs for default field.\n\t\t\t\t\t\t\t$this->default_field_hidden_inputs();\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Fires after XProfile Field content metabox.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tdo_action( 'xprofile_field_after_contentbox', $this ); ?>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div><!-- #post-body -->\n\t\t\t\t</div><!-- #poststuff -->\n\t\t\t</form>\n\t\t</div>\n\n\t<?php\n\t}\n\n\t/**\n\t * Private method used to display the submit metabox.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $button_text Text to put on button.\n\t */\n\tprivate function submit_metabox( $button_text = '' ) {\n\n\t\t/**\n\t\t * Fires before XProfile Field submit metabox.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t */\n\t\tdo_action( 'xprofile_field_before_submitbox', $this ); ?>\n\n\t\t<div id=\"submitdiv\" class=\"postbox\">\n\t\t\t<h2><?php esc_html_e( 'Submit', 'buddypress' ); ?></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<div id=\"submitcomment\" class=\"submitbox\">\n\t\t\t\t\t<div id=\"major-publishing-actions\">\n\n\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Fires at the beginning of the XProfile Field publishing actions section.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @since 2.1.0\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tdo_action( 'xprofile_field_submitbox_start', $this ); ?>\n\n\t\t\t\t\t\t<input type=\"hidden\" name=\"field_order\" id=\"field_order\" value=\"<?php echo esc_attr( $this->field_order ); ?>\" />\n\n\t\t\t\t\t\t<?php if ( ! empty( $button_text ) ) : ?>\n\n\t\t\t\t\t\t\t<div id=\"publishing-action\">\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"saveField\" value=\"<?php echo esc_attr( $button_text ); ?>\" class=\"button-primary\" />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t\t\t<div id=\"delete-action\">\n\t\t\t\t\t\t\t<a href=\"users.php?page=bp-profile-setup\" class=\"deletion\"><?php esc_html_e( 'Cancel', 'buddypress' ); ?></a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<?php wp_nonce_field( 'xprofile_delete_option' ); ?>\n\n\t\t\t\t\t\t<div class=\"clear\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<?php\n\n\t\t/**\n\t\t * Fires after XProfile Field submit metabox.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param BP_XProfile_Field $this Current XProfile field.\n\t\t */\n\t\tdo_action( 'xprofile_field_after_submitbox', $this );\n\t}\n\n\t/**\n\t * Private method used to output field name and description fields.\n\t *\n\t * @since 2.3.0\n\t */\n\tprivate function name_and_description() {\n\t?>\n\n\t\t<div id=\"titlediv\">\n\t\t\t<div class=\"titlewrap\">\n\t\t\t\t<label id=\"title-prompt-text\" for=\"title\"><?php echo esc_html_x( 'Name (required)', 'XProfile admin edit field', 'buddypress' ); ?></label>\n\t\t\t\t<input type=\"text\" name=\"title\" id=\"title\" value=\"<?php echo esc_attr( $this->name ); ?>\" autocomplete=\"off\" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"postbox\">\n\t\t\t<h2><?php echo esc_html_x( 'Description', 'XProfile admin edit field', 'buddypress' ); ?></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<label for=\"description\" class=\"screen-reader-text\"><?php\n\t\t\t\t\t/* translators: accessibility text */\n\t\t\t\t\tesc_html_e( 'Add description', 'buddypress' );\n\t\t\t\t?></label>\n\t\t\t\t<textarea name=\"description\" id=\"description\" rows=\"8\" cols=\"60\"><?php echo esc_textarea( $this->description ); ?></textarea>\n\t\t\t</div>\n\t\t</div>\n\n\t<?php\n\t}\n\n\t/**\n\t * Private method used to output field Member Type metabox.\n\t *\n\t * @since 2.4.0\n\t */\n\tprivate function member_type_metabox() {\n\n\t\t// The primary field is for all, so bail.\n\t\tif ( 1 === (int) $this->id ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail when no member types are registered.\n\t\tif ( ! $member_types = bp_get_member_types( array(), 'objects' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$field_member_types = $this->get_member_types();\n\n\t\t?>\n\n\t\t<div id=\"member-types-div\" class=\"postbox\">\n\t\t\t<h2><?php _e( 'Member Types', 'buddypress' ); ?></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<p class=\"description\"><?php _e( 'This field should be available to:', 'buddypress' ); ?></p>\n\n\t\t\t\t<ul>\n\t\t\t\t\t<?php foreach ( $member_types as $member_type ) : ?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label for=\"member-type-<?php echo $member_type->labels['name']; ?>\">\n\t\t\t\t\t\t\t<input name=\"member-types[]\" id=\"member-type-<?php echo $member_type->labels['name']; ?>\" class=\"member-type-selector\" type=\"checkbox\" value=\"<?php echo $member_type->name; ?>\" <?php checked( in_array( $member_type->name, $field_member_types ) ); ?>/>\n\t\t\t\t\t\t\t<?php echo $member_type->labels['name']; ?>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php endforeach; ?>\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label for=\"member-type-none\">\n\t\t\t\t\t\t\t<input name=\"member-types[]\" id=\"member-type-none\" class=\"member-type-selector\" type=\"checkbox\" value=\"null\" <?php checked( in_array( 'null', $field_member_types ) ); ?>/>\n\t\t\t\t\t\t\t<?php _e( 'Users with no member type', 'buddypress' ); ?>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</li>\n\n\t\t\t\t</ul>\n\t\t\t\t<p class=\"description member-type-none-notice<?php if ( ! empty( $field_member_types ) ) : ?> hide<?php endif; ?>\"><?php _e( 'Unavailable to all members.', 'buddypress' ) ?></p>\n\t\t\t</div>\n\n\t\t\t<input type=\"hidden\" name=\"has-member-types\" value=\"1\" />\n\t\t</div>\n\n\t\t<?php\n\t}\n\n\t/**\n\t * Private method used to output field visibility metaboxes.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @return void If default field id 1.\n\t */\n\tprivate function visibility_metabox() {\n\n\t\t// Default field cannot have custom visibility.\n\t\tif ( true === $this->is_default_field() ) {\n\t\t\treturn;\n\t\t} ?>\n\n\t\t<div class=\"postbox\">\n\t\t\t<h2><label for=\"default-visibility\"><?php esc_html_e( 'Visibility', 'buddypress' ); ?></label></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<div>\n\t\t\t\t\t<select name=\"default-visibility\" id=\"default-visibility\">\n\n\t\t\t\t\t\t<?php foreach( bp_xprofile_get_visibility_levels() as $level ) : ?>\n\n\t\t\t\t\t\t\t<option value=\"<?php echo esc_attr( $level['id'] ); ?>\" <?php selected( $this->get_default_visibility(), $level['id'] ); ?>>\n\t\t\t\t\t\t\t\t<?php echo esc_html( $level['label'] ); ?>\n\t\t\t\t\t\t\t</option>\n\n\t\t\t\t\t\t<?php endforeach ?>\n\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<input type=\"radio\" id=\"allow-custom-visibility-allowed\" name=\"allow-custom-visibility\" value=\"allowed\" <?php checked( $this->get_allow_custom_visibility(), 'allowed' ); ?> />\n\t\t\t\t\t\t\t<label for=\"allow-custom-visibility-allowed\"><?php esc_html_e( 'Allow members to override', 'buddypress' ); ?></label>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<input type=\"radio\" id=\"allow-custom-visibility-disabled\" name=\"allow-custom-visibility\" value=\"disabled\" <?php checked( $this->get_allow_custom_visibility(), 'disabled' ); ?> />\n\t\t\t\t\t\t\t<label for=\"allow-custom-visibility-disabled\"><?php esc_html_e( 'Enforce field visibility', 'buddypress' ); ?></label>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<?php\n\t}\n\n\t/**\n\t * Output the metabox for setting if field is required or not.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @return void If default field.\n\t */\n\tprivate function required_metabox() {\n\n\t\t// Default field is always required.\n\t\tif ( true === $this->is_default_field() ) {\n\t\t\treturn;\n\t\t} ?>\n\n\t\t<div class=\"postbox\">\n\t\t\t<h2><label for=\"required\"><?php esc_html_e( 'Requirement', 'buddypress' ); ?></label></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<select name=\"required\" id=\"required\">\n\t\t\t\t\t<option value=\"0\"<?php selected( $this->is_required, '0' ); ?>><?php esc_html_e( 'Not Required', 'buddypress' ); ?></option>\n\t\t\t\t\t<option value=\"1\"<?php selected( $this->is_required, '1' ); ?>><?php esc_html_e( 'Required',     'buddypress' ); ?></option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\n\t<?php\n\t}\n\n\t/**\n\t * Private method used to output autolink metabox.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return void If default field id 1.\n\t */\n\tprivate function autolink_metabox() {\n\t\t?>\n\n\t\t<div class=\"postbox\">\n\t\t\t<h2><?php esc_html_e( 'Autolink', 'buddypress' ); ?></h2>\n\t\t\t<div class=\"inside\">\n\t\t\t\t<p class=\"description\"><?php esc_html_e( 'On user profiles, link this field to a search of the Members directory, using the field value as a search term.', 'buddypress' ); ?></p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<label for=\"do-autolink\" class=\"screen-reader-text\"><?php\n\t\t\t\t\t\t/* translators: accessibility text */\n\t\t\t\t\t\tesc_html_e( 'Autolink status for this field', 'buddypress' );\n\t\t\t\t\t?></label>\n\t\t\t\t\t<select name=\"do_autolink\" id=\"do-autolink\">\n\t\t\t\t\t\t<option value=\"on\" <?php selected( $this->get_do_autolink() ); ?>><?php esc_html_e( 'Enabled', 'buddypress' ); ?></option>\n\t\t\t\t\t\t<option value=\"\" <?php selected( $this->get_do_autolink(), false ); ?>><?php esc_html_e( 'Disabled', 'buddypress' ); ?></option>\n\t\t\t\t\t</select>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<?php\n\t}\n\n\t/**\n\t * Output the metabox for setting what type of field this is.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @return void If default field.\n\t */\n\tprivate function type_metabox() {\n\n\t\t// Default field cannot change type.\n\t\tif ( true === $this->is_default_field() ) {\n\t\t\treturn;\n\t\t} ?>\n\n\t\t<div class=\"postbox\">\n\t\t\t<h2><label for=\"fieldtype\"><?php esc_html_e( 'Type', 'buddypress'); ?></label></h2>\n\t\t\t<div class=\"inside\" aria-live=\"polite\" aria-atomic=\"true\" aria-relevant=\"all\">\n\t\t\t\t<select name=\"fieldtype\" id=\"fieldtype\" onchange=\"show_options(this.value)\">\n\n\t\t\t\t\t<?php bp_xprofile_admin_form_field_types( $this->type ); ?>\n\n\t\t\t\t</select>\n\n\t\t\t\t<?php\n\n\t\t\t\t// Deprecated filter, don't use. Go look at {@link BP_XProfile_Field_Type::admin_new_field_html()}.\n\t\t\t\tdo_action( 'xprofile_field_additional_options', $this );\n\n\t\t\t\t$this->render_admin_form_children(); ?>\n\n\t\t\t</div>\n\t\t</div>\n\n\t<?php\n\t}\n\n\t/**\n\t * Output hidden fields used by default field.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @return void If not default field.\n\t */\n\tprivate function default_field_hidden_inputs() {\n\n\t\t// Nonce\n\t\twp_nonce_field( 'bp_xprofile_admin_field', 'bp_xprofile_admin_field' );\n\n\t\t// Field 1 is the fullname field, which cannot have custom visibility.\n\t\tif ( false === $this->is_default_field() ) {\n\t\t\treturn;\n\t\t} ?>\n\n\t\t<input type=\"hidden\" name=\"required\"  id=\"required\"  value=\"1\"       />\n\t\t<input type=\"hidden\" name=\"fieldtype\" id=\"fieldtype\" value=\"textbox\" />\n\n\t\t<?php\n\t}\n\n\t/**\n\t * Return if a field ID is the default field.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param int $field_id ID of field to check.\n\t * @return bool\n\t */\n\tprivate function is_default_field( $field_id = 0 ) {\n\n\t\t// Fallback to current field ID if none passed.\n\t\tif ( empty( $field_id ) ) {\n\t\t\t$field_id = $this->id;\n\t\t}\n\n\t\t// Compare & return.\n\t\treturn (bool) ( 1 === (int) $field_id );\n\t}\n}\n",
			"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/classes/class-bp-xprofile-field.php",
			"file_size": 46814,
			"file_write_time": 131476236152930122,
			"settings":
			{
				"buffer_size": 45219,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<div id=\"buddypress\">\n\t<?php do_action( 'bp_before_member_home_content' ); ?>\n\t<!-- MAIN SECTION\n\t\t================================================ -->\n\t<div id=\"main\">\n\t\t<section class=\"container-wrap main-color\">\n\t\t\t<div id=\"main-container\" class=\"container\">\n\t\t\t\t\n\t\t\t\t<?php get_template_part('page-parts/tabs'); ?>\n\t\t\t\t<script>\n\t\t\t\t\tjQuery(function($){\n\t\t\t\t\t\t<?php if ($group_type == 'career') { ?>\n\t\t\t\t\t\t\t$('#career_groups-personal-li, .vocatioMemberMobileNav #career_groups-personal-li').addClass('current selected');\n\t\t\t\t\t\t<?php } else { ?>\n\t\t\t\t\t\t\t$('#industry_groups-personal-li, .vocatioMemberMobileNav #industry_groups-personal-li').addClass('current selected');\n\t\t\t\t\t\t<?php } ?>\n\t\t\t\t\t});\n\t\t\t\t</script>\n\n\t\t\t\t<!-- Begin Article -->\n\t\t\t\t<article class=\"page type-page status-publish has-post-thumbnail hentry\">\n\t\t\t\t\t<div class=\"article-content\">\n\t\t\t\t\t\t<section class=\"container-wrap main-color\" style=\"\">\n\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-second_title\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p><?php echo $group->name;?></p>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t<section class=\"container-wrap main-color no-col-gap  border-bottom\" style=\"padding-top: 0px;padding-bottom: 0px;margin-top: -15px;margin-bottom: -2px;min-height: 0px\">\n\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-singleline\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t<section id=\"tab-menu\" class=\"container-wrap main-color\" style=\"\">\n\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<section class=\"container-wrap main-color\" style=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div id=\"tab-menu-row\" class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-carreer-links\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p style=\"text-align: left;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a class=\"show-tab\" onclick=\"showTab('group-home')\" title=\"\" href=\"#\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thome\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--/user-groups/<?php echo strtolower($group->name);?>/-->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-carreer-links\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p style=\"text-align: left;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a class=\"show-tab\" onclick=\"showTab('group-members')\" title=\"Accountant Members\" href=\"#\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmembers\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<?php if(!get_the_id()){ ?>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<section class=\"container-wrap main-color\" style=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-carreer-links\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"dropdown-wrapper wpb_wrapper\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p id=\"filter\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction refineUrl() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//get full url\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = window.location.href;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//get url after/  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar value = url.substring(url.lastIndexOf('/') + 1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//get the part after before ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue  = value.split(\"?\")[0];   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</script>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$home_sort = !empty($_GET['home_sort']) ? $_GET['home_sort'] : '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<form id=\"group-home-filter\" class=\"filter\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label>filter:&nbsp;</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select onchange=\"if (this.value) window.location.href = refineUrl()+'?home_sort='+this.value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option <?php echo $home_sort && $home_sort=='comment_count'?'selected':''?> value='comment_count'>popular</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option <?php echo $home_sort && $home_sort=='date'?'selected':''?> value='date'>new</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</form>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$members_sort = !empty($_GET['members_sort']) ? $_GET['members_sort'] : '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<form id=\"group-members-filter\" class=\"filter\" style=\"display:none;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label>filter:&nbsp;</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select onchange=\"if (this.value) window.location.href = refineUrl()+'?members_sort='+this.value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option <?php echo $members_sort && $members_sort=='all'?'selected':''?> value='comment_count'>all</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option <?php echo $members_sort && $members_sort=='companies'?'selected':''?> value='companies'>companies</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<?php } ?>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t<section class=\"container-wrap main-color no-col-gap  border-bottom\" style=\"padding-top: 0px;padding-bottom: 0px;margin-top: 5px;min-height: 0px\">\n\t\t\t\t\t\t\t<div class=\"section-container container\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12 wpb_column column_container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"kleo_text_column wpb_content_element  mm-singleline\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"wpb_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<!-- end section -->\n\t\t\t\t\t\t\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t//tab to display\n\t\t\t\t\t\t\t$displayHome = !empty($_GET['home_sort']) ? 'block' : 'none';\n\t\t\t\t\t\t\t$displayMembers = !empty($_GET['members_sort']) ? 'block' : 'none';\n\t\t\t\t\t\t\tif(empty($_GET['home_sort']) && empty($_GET['members_sort']))\n\t\t\t\t\t\t\t\t$displayHome = 'block';\n\n\t\t\t\t\t\t\tif(isset($_GET['mlpage'])){\n\t\t\t\t\t\t\t\t$displayHome =  'none';\n\t\t\t\t\t\t\t\t$displayMembers = 'block';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t<!-- HOME TAB -->\n\t\t\t\t\t\t<section class=\"group-home group-tab container-wrap main-color\" style=\"display:<?php echo $displayHome ?>\">\n\t\t\t\t\t\t\t<?php include(locate_template('page-parts/career-groups/home-tab.php')); ?>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<!-- end section -->\n\n\n\t\t\t\t\t\t<!-- MEMBERS TAB -->\n\t\t\t\t\t\t<section class=\"group-members group-tab container-wrap main-color\" style=\"display:<?php echo $displayMembers ?>\">\n\t\t\t\t\t\t\t<?php include(locate_template('page-parts/career-groups/members-tab.php')); ?>\n\t\t\t\t\t\t</section>\n\n\n\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<!--end article-content-->\n\t\t\t\t</article>\n\t\t\t\t<!-- End  Article -->\n\t\t\t</div>\n\t\t\t<!--end .container-->\n\t\t</section>\n\t\t<!--END MAIN SECTION-->\n\t</div>\n\t<!-- #main -->\n\t<?php do_action( 'bp_after_member_home_content' ); ?>\n</div>\n<script>\n\tjQuery('.show-tab, .dropdown-wrapper option').click(function(event){\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t});\n\n\tfunction showTab(tab) {\n\t    jQuery('.group-tab').hide();\n\t    jQuery('.'+tab).fadeIn(\"fast\");\n\n\t    jQuery('.filter').hide();\n\t    jQuery('#'+tab+'-filter').show();\n\t}\n</script>",
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/groups/single/home.php",
			"file_size": 9088,
			"file_write_time": 131547051261614416,
			"settings":
			{
				"buffer_size": 8855,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/this-week.php",
			"settings":
			{
				"buffer_size": 2304,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/sidebar.php",
			"settings":
			{
				"buffer_size": 4850,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-members/bp-members-template.php",
			"settings":
			{
				"buffer_size": 72937,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/bp-xprofile-functions.php",
			"settings":
			{
				"buffer_size": 43680,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-includes/class-wp-user-query.php",
			"settings":
			{
				"buffer_size": 29868,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Ampps/www/vocatio/wp-content/plugins/advanced-custom-fields/core/api.php",
			"settings":
			{
				"buffer_size": 32845,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "push",
		"selected_items":
		[
			[
				"push",
				"Git: Push"
			],
			[
				"qui",
				"Git: Quick Commit (repo)"
			],
			[
				"ad",
				"Git: Add..."
			],
			[
				"git qui",
				"BracketHighlighter: Quick Start Guide"
			],
			[
				"git res",
				"Git: Reset (hard) HEAD"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git",
				"Git: Status"
			],
			[
				"pul",
				"Git: Pull"
			],
			[
				"a",
				"Git: Add..."
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"remov",
				"Project Manager: Remove Project"
			],
			[
				"merg",
				"Git: Merge Branch"
			],
			[
				"git chang",
				"Git: Change Branch"
			],
			[
				"git qu",
				"Git: Quick Commit (repo)"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"chan",
				"Git: Change Branch"
			],
			[
				"remove pro",
				"Project Manager: Remove Project"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"git new",
				"Git: New Branch"
			],
			[
				"new pro",
				"Project Manager: Add New Project"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"new",
				"Project Manager: Add New Project"
			],
			[
				"new proje",
				"Project Manager: Add New Project"
			],
			[
				"add",
				"Project Manager: Add New Project"
			],
			[
				"proj",
				"Project Manager: Add New Project"
			],
			[
				"da",
				"Git: Diff All Files"
			],
			[
				"git cha",
				"Git: Change Branch"
			],
			[
				"proje",
				"Project: Save As"
			]
		],
		"width": 741.0
	},
	"console":
	{
		"height": 283.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Ampps/www/vocatio",
		"/C/Ampps/www/vocatio/wp-content",
		"/C/Ampps/www/vocatio/wp-content/themes",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single"
	],
	"file_history":
	[
		"/C/Ampps/www/vocatio/wp-includes/widgets.php",
		"/C/Ampps/www/vocatio/wp-content/debug.log",
		"/C/Program Files (x86)/Ampps/www/abimultisite/.htaccess",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/functions.php",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/style.css",
		"/C/Ampps/www/anitabmulti/.htaccess",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/admin/bp-core-admin-schema.php",
		"/C/Ampps/www/vocatio/wp-content/themes/kleo/assets/css/app.css",
		"/C/Ampps/www/anitabcommunity/wp-config.php",
		"/C/Ampps/www/anitabcommunity/.htaccess",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/debug.log",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/wp-config.php",
		"/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/classes/class-bp-group-member-query.php",
		"/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/classes/class-bp-groups-member.php",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/this-week/tracked-industry-groups.php",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/this-week/tracked-career-groups.php",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/career-groups/banner.php",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/career-groups/sidebar.php",
		"/C/Ampps/www/vocatio/status.php",
		"/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/sidebar.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/.htaccess",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-config.php",
		"/C/Ampps/www/vocatio/wp-config.php",
		"/C/Ampps/conf/httpd.conf",
		"/C/Ampps/www/vocatio/.htaccess",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/aboutme/ideals-modal.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/members/single/aboutme.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/aboutme/basic-info-tab.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/js/login.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/student-profile.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/aboutme.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/js_composer/assets/js/backend/composer-view.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/groups/single/home.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/js/vocatio.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/lib/options.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/this-week/header-stats.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/sidebar.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-members/bp-members-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-profile.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/post-content-masonry.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/student-home.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/home.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/style.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/career_groups.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/industry_groups.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/companies.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/career-groups/banner.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-includes/functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/fit_tests.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/classes/class-bp-groups-member.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/groups/single/index.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/members/single/fit_test.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/login.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/main.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/job_fit_reports.php",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/login.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/js_composer/assets/js/editors/panels.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/fit-tests/job_fit_reports.php",
		"/C/Users/Roman/Desktop/backup_careerfit_page",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/js_composer/include/templates/shortcodes/vc_raw_html.php",
		"/C/Users/Roman/AppData/Local/Temp/Temp1_js_composer.zip/js_composer/index.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/debug.log",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/this-week.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/this-week/posts.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/bp-groups-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/bp-groups-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/classes/class-bp-xprofile-profiledata.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/bp-xprofile-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/bp-xprofile-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-members/bp-members-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/classes/class-bp-xprofile-field.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-admin/css/login.css",
		"/C/Users/Roman/AppData/Local/Temp/fz3temp-2/wp-config 2.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/berke/berke-api.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/industry-groups.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/fit-tests/cognitive_results.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-templates/bp-legacy/css/twentyten.scss",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/berke/berke-api-handler.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/members/single/company-recruiters.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-taxonomy.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/classes/class-bp-groups-group.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-includes/media.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-includes/post-thumbnail-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/advanced-custom-fields/core/api.php",
		"/C/Program Files (x86)/Ampps/www/newearthnation/wp-content/themes/kleo-child/includes/events/js/ne-events.js",
		"/C/Program Files (x86)/Ampps/www/newearthnation/wp-content/assets/js/ne-common.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/dossier/sidebar.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-recruiters-list.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-recruiters-add-new.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/job_listings-student.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/banner.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/job_listings.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/members/single/this-week.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress-followers/_inc/bp-follow-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/this-week/following.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/recruiters.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/classes/class-bp-messages-message.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/bp-messages-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-avatars.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/classes/class-bp-messages-thread.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/bp-messages-template.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/messages/messages-loop.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/messages/single.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/bp-messages-notifications.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-notifications/bp-notifications-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-messages/bp-messages-screens.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-includes/widgets.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/kleo/kleo-framework/lib/class-multiple-sidebars.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/classes/class-bp-user-query.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/browse-students.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/dossier.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-info.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-student-matches.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/coming-soon.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/career-groups.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/fit-tests/assessment-not-taken.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/js/berke-api.js",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/dossier/banner-recruiter.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/berke/berke-admin.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/lib/shortcodes.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/kleo/lib/theme-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-functions.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/buddypress/members/single/dossier.css",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/single-recruiters.php",
		"/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/berke/berke-functions.php"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\kleo",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\kleo",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\plugins\\buddypress",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\kleo",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\kleo",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child",
			"C:\\Program Files (x86)\\Ampps\\www\\vocatio\\wp-content\\themes\\vocatio-kleo-child\\berke",
			"C:\\Program Files (x86)\\Ampps\\www\\Knight-Global-Website",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\wp-includes",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\wp-content\\themes\\i-excel",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\wp-content\\plugins\\geo-my-wp",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\wp-includes",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\",
			"C:\\Program Files (x86)\\Ampps\\www\\bookcapture\\wp-content\\themes\\i-excel",
			"C:\\Program Files (x86)\\Ampps\\www\\abimultisite\\wp-content\\themes\\abi",
			"C:\\Program Files (x86)\\Ampps\\www\\anitaborg\\wp-content\\themes\\abi-dot-local"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"abimultisite",
			"single-sfwd-topic",
			"register_sidebar",
			"error",
			"acf_get_field_key",
			"bp_xprofile_fields",
			"bp_groups",
			"users",
			"INNER JOIN",
			"$company_industry",
			"numeric",
			"profile",
			"csize",
			"cindustry",
			"companyFilterResults",
			"ctype",
			"cindustry",
			"selected",
			"csize",
			"company-size",
			"company-type-input",
			"company_type",
			"companyFilterResults",
			"uppercase",
			"company-filter",
			"company-type-filter",
			"mm-carreer-links",
			"groups_get_groups",
			"'type' => 'industries'",
			"'type' => 'industry'",
			"industri",
			"industry",
			"vocatioIdealCompanyOptionsShortcode",
			"xprofile",
			"get_field",
			"get_filed",
			"xprofile_get_field_data",
			"EMPLOYEES",
			"select",
			"bp-user",
			"company",
			"no-col-gap",
			"refineUrl",
			"student",
			"acf_",
			"get_all_for_group",
			"$bp->members->nav->get_primary",
			"vocatioMemberMobileNav",
			".personalityDimensions .img-block",
			".personalityDimensions .img-block, .cognitiveDimensions .img-block",
			"personalityPopulateDimension",
			"cognitiveFindTrait",
			"match",
			".match",
			"vocatioIdealCompanyOptionsShortcode",
			"idealIndustryGrid",
			"vocatioIdealIndustryOptionsShortcode",
			"vocatio_ideal_industry_options",
			"Company",
			"data",
			"job fit",
			"font-family: Roboto Condensed;",
			".col-sm-12",
			"btn",
			"join-group",
			"join",
			"font-size: 16px;",
			"#main .btn-default-drop .dropdown-menu>li>a",
			"max-width",
			"student",
			"intro_text",
			"sm",
			"personality_fit",
			"intro_text",
			"personality_fit",
			"fit_intro",
			"fit-intro",
			"intro_fit",
			"fit_intro",
			"vocatioPersonalityFitIntroBlock",
			"personality_fit",
			"personality_fit_video",
			"personality_fit",
			"DB_CHARSET",
			"getDefaults",
			"options",
			"templateOptions",
			"default",
			"html",
			"personality-introduction",
			"career-fit",
			"register_",
			"careerfit",
			"fit_resu",
			"fit_Results",
			"register_field_group",
			"intro_text",
			"Your Dossier is your chance",
			"intro_text",
			"$currentUserRole",
			"popup-iframe",
			"home.css",
			"btn-see-through",
			"add_query_arg",
			"bp_core_get_userlink",
			"vocatioUserUpdateIndustries",
			"alternative_name",
			"get_ideals_list",
			"vocatioGetIdealsList",
			"results",
			"alternative_name",
			"login.js",
			"alternative_name",
			"ssl",
			"SITE_URL",
			"\n\t",
			"redirect",
			"26, $user_id, $idealIndustry, $nowTime",
			"$idealIndustry",
			"idealIndustry",
			"idealCompanyTypeInput",
			".data",
			"company",
			"idealIndustryInput",
			"idealCompany",
			"idealCompanyInput",
			"toggleClass",
			"idealIndustry"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"vocatioIdealCompanyOptionsShortcode",
			"cognitivePopulateDimension",
			"cognitiveTraits",
			"cognitiveRenderCanvas",
			"cognitiveAddImg"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 135076,
						"regions":
						{
						},
						"selection":
						[
							[
								134122,
								134122
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 97044.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/career-groups/sidebar.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3897,
						"regions":
						{
						},
						"selection":
						[
							[
								2532,
								2532
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2644,
										2645
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2505,
										2506
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1193.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/companies.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8240,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										367,
										368
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 616.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/company-following.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2316,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 343,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										201,
										217
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								214,
								214
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										189,
										190
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "C:\\Ampps\\www\\vocatio",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133661,
						"regions":
						{
						},
						"selection":
						[
							[
								34309,
								34309
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										34608,
										34609
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										34308,
										34309
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2000.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Ampps/www/vocatio/wp-includes/formatting.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 189124,
						"regions":
						{
						},
						"selection":
						[
							[
								80342,
								80349
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 40504.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-groups/bp-groups-functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 77398,
						"regions":
						{
						},
						"selection":
						[
							[
								20819,
								20819
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										22445,
										22446
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										20755,
										20756
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1094.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/css/main.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50497,
						"regions":
						{
						},
						"selection":
						[
							[
								33505,
								33505
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										33504,
										33505
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										33469,
										33470
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/CSS3/CSS3.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34684.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-activity/bp-activity-actions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27970,
						"regions":
						{
						},
						"selection":
						[
							[
								11524,
								11524
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11707,
										11708
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										10363,
										10364
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8006.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-core/bp-core-functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 125787,
						"regions":
						{
						},
						"selection":
						[
							[
								42718,
								42718
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										42997,
										43002
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										42193,
										42195
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 31678.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/Program Files (x86)/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/classes/class-bp-xprofile-field.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45219,
						"regions":
						{
						},
						"selection":
						[
							[
								24569,
								24569
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										25096,
										25097
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										24549,
										24550
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 20788.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/groups/single/home.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8855,
						"regions":
						{
						},
						"selection":
						[
							[
								2824,
								2824
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 746.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/buddypress/members/single/this-week.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2304,
						"regions":
						{
						},
						"selection":
						[
							[
								562,
								562
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/Ampps/www/vocatio/wp-content/themes/vocatio-kleo-child/page-parts/company-profile/sidebar.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4850,
						"regions":
						{
						},
						"selection":
						[
							[
								1229,
								1229
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1310,
										1312
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"region.orangish"
									]
								},
								"open":
								{
									"1":
									[
										1226,
										1228
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 702.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-members/bp-members-template.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72937,
						"regions":
						{
						},
						"selection":
						[
							[
								32588,
								32588
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2176.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/C/Ampps/www/vocatio/wp-content/plugins/buddypress/bp-xprofile/bp-xprofile-functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43680,
						"regions":
						{
						},
						"selection":
						[
							[
								9414,
								9414
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6202.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/C/Ampps/www/vocatio/wp-includes/class-wp-user-query.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29868,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2046.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/C/Ampps/www/vocatio/wp-content/plugins/advanced-custom-fields/core/api.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32845,
						"regions":
						{
						},
						"selection":
						[
							[
								4979,
								4979
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5128.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 168.0
	},
	"output.gulp_output":
	{
		"height": 299.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 142.0
	},
	"pinned_build_system": "",
	"project": "Vocatio.sublime-project",
	"replace":
	{
		"height": 59.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"functions.",
				"wp-content\\themes\\vocatio-kleo-child\\functions.php"
			],
			[
				"app.css",
				"wp-content\\themes\\kleo\\assets\\css\\app.css"
			],
			[
				"functions.p",
				"wp-content\\themes\\vocatio-kleo-child\\functions.php"
			],
			[
				"main.cs",
				"wp-content\\themes\\vocatio-kleo-child\\css\\main.css"
			],
			[
				"main.",
				"wp-content\\themes\\vocatio-kleo-child\\css\\main.css"
			],
			[
				"functions",
				"wp-content\\themes\\vocatio-kleo-child\\functions.php"
			],
			[
				"fit_test",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\fit_tests.php"
			],
			[
				"job_fit",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\job_fit_reports.php"
			],
			[
				"vocatio-kleo-child/style",
				"wp-content\\themes\\vocatio-kleo-child\\style.css"
			],
			[
				"main.c",
				"wp-content\\themes\\vocatio-kleo-child\\css\\main.css"
			],
			[
				"wp-config",
				"wp-config.php"
			],
			[
				"functions.php",
				"wp-content\\themes\\vocatio-kleo-child\\functions.php"
			],
			[
				"fit_",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\fit_tests.php"
			],
			[
				"home.ph",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\home.php"
			],
			[
				"main.css",
				"wp-content\\themes\\vocatio-kleo-child\\css\\main.css"
			],
			[
				"buddy",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress.php"
			],
			[
				"home.css",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\groups\\single\\home.css"
			],
			[
				"login.c",
				"wp-content\\themes\\vocatio-kleo-child\\css\\login.css"
			],
			[
				"login.css",
				"wp-admin\\css\\login.css"
			],
			[
				"login.js",
				"wp-content\\themes\\vocatio-kleo-child\\js\\login.js"
			],
			[
				"lign.j",
				"wp-content\\themes\\vocatio-kleo-child\\js\\login.js"
			],
			[
				"industry_g",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\industry_groups.php"
			],
			[
				"berke-a",
				"wp-content\\themes\\vocatio-kleo-child\\berke\\berke-api.php"
			],
			[
				"buddypress",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress.php"
			],
			[
				"buddypress.csss",
				"wp-content\\plugins\\buddypress\\bp-templates\\bp-legacy\\css\\twentyten.scss"
			],
			[
				"fit_tes",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\fit_test.css"
			],
			[
				"buddyp",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress.php"
			],
			[
				"berke-ap",
				"wp-content\\themes\\vocatio-kleo-child\\berke\\berke-api.php"
			],
			[
				"fit",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\fit_tests.php"
			],
			[
				"companies.",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\companies.php"
			],
			[
				"fit_test.cs",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\fit_test.css"
			],
			[
				"mainc",
				"wp-content\\themes\\vocatio-kleo-child\\css\\main.css"
			],
			[
				"assessment-no",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\fit-tests\\assessment-not-taken.php"
			],
			[
				"berkea",
				"wp-content\\themes\\vocatio-kleo-child\\berke\\berke-api.php"
			],
			[
				"recruier",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\recruiters.php"
			],
			[
				"members/home",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\home.php"
			],
			[
				"groups/index",
				"wp-content\\themes\\kleo\\buddypress\\groups\\index.php"
			],
			[
				"high-sc",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\this-week\\high-student-matches.php"
			],
			[
				"this-wee",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\this-week.php"
			],
			[
				"wp-co",
				"wp-config.php"
			],
			[
				"company-profil",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\company-profile.css"
			],
			[
				"this-w",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\this-week.css"
			],
			[
				"sidebar.php",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\company-profile\\sidebar.php"
			],
			[
				"this-week",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\this-week.css"
			],
			[
				"app.js",
				"wp-content\\themes\\vocatio-kleo-child\\js\\app.js"
			],
			[
				"group-fun",
				"wp-content\\plugins\\buddypress\\bp-groups\\bp-groups-functions.php"
			],
			[
				"this-week.cs",
				"wp-content\\themes\\vocatio-kleo-child\\css\\buddypress\\members\\single\\this-week.css"
			],
			[
				"buddypress.p",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress.php"
			],
			[
				"header-st",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\this-week\\header-stats.php"
			],
			[
				"high-stu",
				"wp-content\\themes\\vocatio-kleo-child\\page-parts\\this-week\\high-student-matches.php"
			],
			[
				"group-funct",
				"wp-content\\plugins\\buddypress\\bp-groups\\bp-groups-functions.php"
			],
			[
				"single-rec",
				"wp-content\\themes\\vocatio-kleo-child\\single-recruiters.php"
			],
			[
				"func",
				"wp-content\\themes\\vocatio-kleo-child\\functions.php"
			],
			[
				"recruiters.ph",
				"wp-content\\themes\\vocatio-kleo-child\\buddypress\\members\\single\\recruiters.php"
			],
			[
				"group-he",
				"wp-content\\themes\\kleo\\buddypress\\groups\\single\\group-header.php"
			],
			[
				"general-aft",
				"wp-content\\themes\\kleo\\page-parts\\general-after-wrap.php"
			],
			[
				"berke",
				"wp-content\\themes\\vocatio-kleo-child\\berke\\berke-api.php"
			],
			[
				"widget",
				"wp-content\\themes\\vocatio-kleo-child\\js\\widgets.js"
			],
			[
				"home.php",
				"wp-content\\plugins\\buddypress\\bp-themes\\bp-default\\members\\single\\home.php"
			],
			[
				"vicatio.",
				"wp-content\\themes\\vocatio-kleo-child\\js\\vocatio.js"
			],
			[
				"style.css",
				"wp-content\\themes\\book-capture\\style.css"
			],
			[
				"ad",
				"wp-content\\plugins\\advanced-custom-fields\\lang\\acf-de_DE.mo"
			],
			[
				"exte",
				"wp-content\\themes\\abi-dot-local\\css\\extend.css"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\Roman\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\Projects\\ChargeItSpot.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 552.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
